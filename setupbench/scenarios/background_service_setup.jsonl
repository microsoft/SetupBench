{"instance_id": "bgsetup-gunicorn-systemd-socket", "success_command": "curl --unix-socket /tmp/gunicorn.sock http://localhost/ | grep -q \"Hello\" && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install Gunicorn and configure it to serve a Flask app as a background service using supervisord. The app must bind to a Unix domain socket located at /tmp/gunicorn.sock. The Flask app is located in /testbed/app.py. Ensure the service starts correctly and remains active.", "description": "A production-grade background service setup task. The agent must install and configure Gunicorn to run a Flask app using supervisord. The app must bind to a Unix domain socket and persist as a long-running process. This task evaluates the agent\u00e2\u20ac\u2122s ability to deploy services in containerized environments using process managers and non-TCP IPC mechanisms.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall Gunicorn and configure it to serve a Flask app as a background service using supervisord. The app must bind to a Unix domain socket located at /tmp/gunicorn.sock. The Flask app is located in /testbed/app.py. Ensure the service starts correctly and remains active.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.bgsetup-gunicorn-systemd-socket:msbench-0.0.4", "task_type": "bgsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "bgsetup-celery-systemd", "success_command": "sleep 12 && redis-cli GET beat_check | grep -q \"alive\" && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install Redis and Celery. Start a Redis server, then configure both a Celery worker and a Celery Beat scheduler as supervisord-managed background processes. The Celery app is located in /testbed/tasks.py. A periodic task should run and set the Redis key beat_check to 'alive'.", "description": "A realistic background service orchestration task. The agent must configure both a Celery worker and a Celery Beat scheduler using supervisord. These processes must coordinate through Redis and ensure periodic execution of tasks in the background. This task evaluates the agent\u00e2\u20ac\u2122s skill with multi-process coordination, queuing systems, and scheduler setup in a containerized environment.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall Redis and Celery. Start a Redis server, then configure both a Celery worker and a Celery Beat scheduler as supervisord-managed background processes. The Celery app is located in /testbed/tasks.py. A periodic task should run and set the Redis key beat_check to 'alive'.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.bgsetup-celery-systemd:msbench-0.0.4", "task_type": "bgsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "bgsetup-gunicorn-nginx-socket", "success_command": "curl -s http://localhost/ | grep -q \"Hello from Gunicorn!\" && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install Gunicorn, Flask, and NGINX. Configure Gunicorn to serve a Flask app via a Unix domain socket at /tmp/gunicorn.sock. Then configure NGINX to reverse proxy requests to that socket and serve the app on http://localhost/. The Flask app is located in /testbed/app.py. Ensure both services run persistently using supervisord.", "description": "A complex multi-service setup task. The agent must configure Gunicorn to serve a Flask app through a Unix domain socket and expose it externally via NGINX. Both services must run as background processes managed by supervisord. This task evaluates service chaining, socket-based IPC, and reverse proxy configuration in production-like environments.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall Gunicorn, Flask, and NGINX. Configure Gunicorn to serve a Flask app via a Unix domain socket at /tmp/gunicorn.sock. Then configure NGINX to reverse proxy requests to that socket and serve the app on http://localhost/. The Flask app is located in /testbed/app.py. Ensure both services run persistently using supervisord.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.bgsetup-gunicorn-nginx-socket:msbench-0.0.4", "task_type": "bgsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "bgsetup-filewatcher-daemon", "success_command": "mkdir -p /watched && touch /watched/hello.txt && sleep 2 && grep -q \"hello.txt\" /var/log/watcher.log && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install the watchdog Python package and configure the watcher.py script in /testbed to run as a long-lived background process using supervisord. The script should monitor the /watched directory for file creation events and log them to /var/log/watcher.log.", "description": "A practical background monitoring task. The agent must configure a Python-based file watcher to run persistently using supervisord and correctly log filesystem events. This task evaluates the agent\u00e2\u20ac\u2122s ability to configure structured logging, monitor directories in real time, and daemonize Python scripts in a containerized environment.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall the watchdog Python package and configure the watcher.py script in /testbed to run as a long-lived background process using supervisord. The script should monitor the /watched directory for file creation events and log them to /var/log/watcher.log.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.bgsetup-filewatcher-daemon:msbench-0.0.4", "task_type": "bgsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "bgsetup-filewatcher-daemon-2", "success_command": "mkdir -p /watched/nested && touch /watched/nested/hello.json && sleep 3 && grep -q \"nested/hello.json\" /var/log/watcher.json.log && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install the watchdog Python package and configure the watcher.py script in /testbed to run as a supervised background process. It must recursively monitor a directory defined by the WATCH_PATH environment variable (default: /watched) and log create, delete, and modify events in JSON format to /var/log/watcher.json.log.", "description": "A more advanced file monitoring task. The agent must configure a recursive file watcher that logs structured event data to disk and uses environment variables for configuration. The script must run under supervisord as a persistent process. This task evaluates advanced logging, process supervision, and dynamic script behavior.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall the watchdog Python package and configure the watcher.py script in /testbed to run as a supervised background process. It must recursively monitor a directory defined by the WATCH_PATH environment variable (default: /watched) and log create, delete, and modify events in JSON format to /var/log/watcher.json.log.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.bgsetup-filewatcher-daemon-2:msbench-0.0.4", "task_type": "bgsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "bgsetup-autossh-reverse-tunnel", "success_command": "timeout 5 ssh -p 9000 localhost -o \"StrictHostKeyChecking=no\" -o \"UserKnownHostsFile=/dev/null\" echo \"Setup successful\" 2>/dev/null || echo \"Setup failed\"", "notes": "Install autossh and configure a persistent reverse SSH tunnel from remote port 9000 back to localhost:22. Use supervisord to manage the autossh process. Authenticate using SSH keys to connect to 127.0.0.1 and ensure the tunnel remains active and restarts if it fails.", "description": "A production-grade secure networking task. The agent must set up a reverse SSH tunnel using autossh and ensure it runs persistently under supervisord. This task tests the agent\u00e2\u20ac\u2122s understanding of SSH authentication, port forwarding, and long-lived background process resilience in modern environments.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall autossh and configure a persistent reverse SSH tunnel from remote port 9000 back to localhost:22. Use supervisord to manage the autossh process. Authenticate using SSH keys to connect to 127.0.0.1 and ensure the tunnel remains active and restarts if it fails.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.bgsetup-autossh-reverse-tunnel:msbench-0.0.4", "task_type": "bgsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "bgsetup-autossh-logging", "success_command": "sleep 10 && grep -q \"Entering main loop\" /var/log/autossh.log && ss -ltn | grep -q \":9000\" && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install autossh and configure it as a persistent supervised process. The tunnel should connect remote port 9000 to localhost:22. Use AUTOSSH_LOGFILE to write logs to /var/log/autossh.log and AUTOSSH_POLL to enable health monitoring. The process must restart automatically if the tunnel fails.", "description": "A robust background service task. The agent must configure autossh to persistently manage a reverse SSH tunnel and log its health status to a known file. The process must be managed by supervisord and automatically restart if it fails. This task simulates a resilient production tunnel with built-in monitoring.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall autossh and configure it as a persistent supervised process. The tunnel should connect remote port 9000 to localhost:22. Use AUTOSSH_LOGFILE to write logs to /var/log/autossh.log and AUTOSSH_POLL to enable health monitoring. The process must restart automatically if the tunnel fails.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.bgsetup-autossh-logging:msbench-0.0.4", "task_type": "bgsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "bgsetup-multiprocess-master-worker", "success_command": "sleep 30 && ls /processed/ | grep -q 'job_' && grep -q 'job_' /var/log/processed.log && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Configure two supervisord-managed processes: one that creates job files in /queue, and another that processes those files into /processed and logs results to /var/log/processed.log. The master should create job files every 10 seconds. Both processes should run in the background and restart if they fail.", "description": "A realistic multi-process coordination task. The agent must configure two supervised processes that interact through the filesystem: a job producer and a job consumer. The producer generates files, and the consumer processes them and logs the outcome. This task evaluates the agent\u00e2\u20ac\u2122s ability to coordinate background workflows using supervisord in isolation.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nConfigure two supervisord-managed processes: one that creates job files in /queue, and another that processes those files into /processed and logs results to /var/log/processed.log. The master should create job files every 10 seconds. Both processes should run in the background and restart if they fail.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.bgsetup-multiprocess-master-worker:msbench-0.0.4", "task_type": "bgsetup", "base_image": "ubuntu:22.04"}