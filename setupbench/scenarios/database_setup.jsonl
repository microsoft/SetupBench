{"instance_id": "dbsetup-postgresql-1", "success_command": "PGPASSWORD=benchmark_pass psql -U benchmark_user -d benchmark_db -c \"SELECT COUNT(*) FROM users;\" | grep -q '[1-9]' && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install PostgreSQL, create a database and user, and run the provided schema.sql and seed.sql files.", "description": "Basic PostgreSQL setup task. The agent must install PostgreSQL, create a new database and user, and execute two flat SQL files containing a user table schema and some seed data. This task tests fundamental environment setup and SQL execution skills.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall PostgreSQL, create a database named benchmark_db and a user named benchmark_user with password benchmark_pass, and run the provided schema.sql and seed.sql files.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-postgresql-1:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-postgresql-2", "success_command": "PGPASSWORD=benchmark_pass psql -U benchmark_user -d benchmark_db -p 5433 -c \"SELECT COUNT(*) FROM users;\" | grep -q '[1-9]' && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install PostgreSQL and apply the migration SQL files in /testbed/migrations in order. You must create a database named benchmark_db and a user named benchmark_user with password benchmark_pass. PostgreSQL must be configured to run on port 5433 and accept TCP connections (e.g., by setting listen_addresses = '*' in postgresql.conf).", "description": "Intermediate PostgreSQL setup task using ordered migrations. The agent must recognize and apply numbered SQL files from the /testbed/migrations directory. One migration requires enabling the uuid-ossp extension, and PostgreSQL must be reconfigured to run on port 5433. Permissions must also be set correctly for the new user.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall PostgreSQL and apply the migration SQL files in /testbed/migrations in order. You must create a database named benchmark_db and a user named benchmark_user with password benchmark_pass. PostgreSQL must be configured to run on port 5433.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-postgresql-2:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-postgresql-3", "success_command": "PGPASSWORD=benchmark_pass psql -U benchmark_user -d benchmark_db -p 5433 -c \"SELECT COUNT(*) FROM users;\" | grep -q '[1-9]' && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install PostgreSQL and apply the SQL files in /testbed/migrations. Create a database named benchmark_db and a user named benchmark_user with password benchmark_pass. PostgreSQL must be configured to run on port 5433.", "description": "Advanced PostgreSQL setup simulating a production failure scenario. Migrations are out of order, contain a reference to a nonexistent table owner, and rely on extensions that must be enabled manually. Additionally, port 5432 is blocked, and PostgreSQL must be bound to port 5433. The agent must diagnose and fix a variety of silent and explicit failures.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall PostgreSQL and apply the SQL files in /testbed/migrations. Create a database named benchmark_db and a user named benchmark_user with password benchmark_pass. PostgreSQL must be configured to run on port 5433.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-postgresql-3:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-mysql-1", "success_command": "mysql -u root -e \"USE benchmark_db; SHOW TABLES;\" | grep -q products && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install MySQL, set up non-interactive root access, create database, and restore from a compressed dump.sql.gz file.", "description": "Basic MySQL setup task. The agent must install MySQL, configure non-interactive root access, create a new database, and import a compressed SQL dump. This task validates ability to work with compressed data and simple MySQL CLI usage.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall MySQL, set up non-interactive root access, create database, and restore from a compressed dump.sql.gz file.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-mysql-1:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-mysql-2", "success_command": "mysql -u root -e \"USE benchmark_db; SHOW TABLES;\" | grep -q products && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install MySQL and apply the .sql.gz files in /testbed/migrations in order. You must create a database named benchmark_db and configure root login to allow password access. Ensure the character set utf8mb4 is used.", "description": "Intermediate MySQL setup task using multiple compressed SQL migration files with foreign key constraints. The agent must apply them in the correct order and configure the server to use utf8mb4 character set. Authentication must be adjusted to allow root password login.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall MySQL and apply the .sql.gz files in /testbed/migrations in order. You must create a database named benchmark_db and configure root login to allow password access. Ensure the character set utf8mb4 is used.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-mysql-2:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-mysql-3", "success_command": "mysql -u benchmark_user -p benchmark_pass -e \"USE benchmark_db; SELECT COUNT(*) FROM products;\" | grep -q '[1-9]' && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install MySQL and apply the .sql.gz files in /testbed/migrations. MySQL must run on port 3307. You must create a user named benchmark_user with password benchmark_pass who can access benchmark_db. The migration files may contain dependency or definer-related issues and may not be ordered correctly.", "description": "Advanced MySQL task with environment interference and corrupted logic. The default port 3306 is blocked, strict SQL mode is enforced, and one migration references a definer user that does not exist. Migrations are also out of order and missing key setup commands. A non-root user must be created and granted access for the success command to work.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall MySQL and apply the .sql.gz files in /testbed/migrations. MySQL must run on port 3307. You must create a user named benchmark_user with password benchmark_pass who can access benchmark_db. The migration files may contain dependency or definer-related issues and may not be ordered correctly.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-mysql-3:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-mongodb-1", "success_command": "mongosh benchmark_db --eval \"db.users.countDocuments({})\" | grep -q '[1-9]' && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install MongoDB, start the service, and import users.json using mongoimport into benchmark_db.users.", "description": "Basic MongoDB setup task. The agent must install MongoDB, start the service, and import a single JSON file into a specified collection. This task tests basic MongoDB CLI usage and JSON import functionality.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall MongoDB, start the service, and import users.json using mongoimport into benchmark_db.users.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-mongodb-1:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-mongodb-2", "success_command": "mongosh benchmark_db -u benchmark_user -p benchmark_pass --authenticationDatabase benchmark_db --eval \"db.users.countDocuments({})\" | grep -q '[1-9]' && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install MongoDB, enable authentication, and import all .json files from /testbed/import into the benchmark_db database. Ensure documents are imported as arrays using the correct flags. Authentication must be used during import.", "description": "A moderately complex MongoDB setup task. The agent must import multiple JSON datasets into separate collections using mongoimport, while respecting document structure and enabling authentication. The data must be imported using the --jsonArray flag, and the agent must authenticate using a created user.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall MongoDB, enable authentication, and import all .json files from /testbed/import into the benchmark_db database. Ensure documents are imported as arrays using the correct flags. Create a user named benchmark_user with password benchmark_pass and authenticate using it for all operations, including import.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-mongodb-2:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-mongodb-3", "success_command": "mongosh benchmark_db --port 27018 -u benchmark_user -p benchmark_pass --authenticationDatabase benchmark_db --eval \"db.users.countDocuments({})\" | grep -q '[1-9]' && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install MongoDB, configure it to run on port 27018, and start it as a replica set (rs0). Restore the BSON files using mongorestore. One of the BSON files may be corrupted and must be handled gracefully. Create a user named benchmark_user with password benchmark_pass and authenticate using it for all operations.", "description": "An advanced MongoDB setup challenge simulating production-like scenarios. The agent must initialize a replica set, reconfigure MongoDB to run on a non-default port, and restore a database from BSON files. One file is corrupted, requiring selective restoration. Authentication with a non-root user is required for success.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall MongoDB, configure it to run on port 27018, and start it as a replica set (rs0). Restore the BSON files using mongorestore. One of the BSON files may be corrupted and must be handled gracefully. Create a user named benchmark_user with password benchmark_pass and authenticate using it for all operations.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-mongodb-3:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-redis-1", "success_command": "redis-cli GET init_check | grep -q \"done\" && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install Redis, use redis-cli --eval to run an initialization Lua script that sets the 'init_check' key.", "description": "Basic Redis setup task. The agent must install Redis and run a Lua script using redis-cli --eval to set a key in the database. This task tests basic Redis CLI usage and Lua script execution functionality.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall Redis, use redis-cli --eval to run an initialization Lua script that sets the 'init_check' key.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-redis-1:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-redis-2", "success_command": "redis-cli -a benchmark_pass --user benchmark_user GET init_check | grep -q \"done\" && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install Redis and run the Lua scripts in /testbed/scripts using redis-cli --eval in the correct order. Configure Redis to persist data using either RDB or AOF. Create an ACL user named benchmark_user with password benchmark_pass that has access to flags:* and init_check keys.", "description": "A moderately complex Redis setup task. The agent must run multiple Lua scripts using redis-cli --eval to initialize different key spaces, while also enabling and authenticating with Redis ACLs. The Redis server must be configured to persist data using RDB or AOF.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall Redis and run the Lua scripts in /testbed/scripts using redis-cli --eval in the correct order. Configure Redis to persist data using either RDB or AOF. Create an ACL user named benchmark_user with password benchmark_pass that has access to flags:* and init_check keys.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-redis-2:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-redis-3", "success_command": "redis-cli -a benchmark_pass --user benchmark_user -p 6380 GET setup:init_check | grep -q \"done\" && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install Redis and start it using a custom redis.conf bound to port 6380. Run the Lua script in /testbed/scripts using redis-cli --eval with the correct KEYS and ARGV values. Configure ACLs for a benchmark_user with password benchmark_pass, and ensure Redis is running in daemonized mode with persistence enabled.", "description": "A complex Redis task simulating a real-world production deployment. The agent must configure Redis using a custom redis.conf, bind it to a non-default port, and run a Lua script via redis-cli --eval with multiple keys and arguments. Redis must run in the background with persistence and ACLs enabled. Port 6379 is blocked, a fake Redis process is running, and the configuration file contains a deliberate syntax error that must be resolved before Redis can start properly. Authentication is required using a benchmark_user with access to namespaced keys.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall Redis and start it using a custom redis.conf bound to port 6380. Run the Lua script in /testbed/scripts using redis-cli --eval with the correct KEYS and ARGV values. Configure ACLs for a benchmark_user with password benchmark_pass, and ensure Redis is running in daemonized mode with persistence enabled.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-redis-3:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-sqlite-1", "success_command": "sqlite3 /data/test.db \"SELECT COUNT(*) FROM items;\" | grep -q '[1-9]' && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install SQLite or use Python's built-in sqlite3 module to run a script that creates a .db file and populates it.", "description": "Basic SQLite setup task. The agent must install SQLite or use Python's built-in sqlite3 module to run a script that creates a .db file and populates it with data. This task tests basic SQLite usage and script execution.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall SQLite or use Python's built-in sqlite3 module to run a script that creates a .db file and populates it.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-sqlite-1:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-sqlite-2", "success_command": "sqlite3 /data/test.db \"SELECT COUNT(*) FROM products;\" | grep -q '[1-9]' && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install SQLite and run the Python init.py script in /testbed to create the test.db file. You must also apply the seed.sql manually to populate data into the related tables.", "description": "A moderately complex SQLite task that simulates common file structure and scripting pitfalls. The agent must correctly run multiple SQL files using a Python script that requires careful file path handling. Data is normalized across multiple tables with foreign key constraints, and the database must be created in a specific directory.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall SQLite and run the Python init.py script in /testbed to create the test.db file. You must also apply the seed.sql manually to populate data into the related tables.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-sqlite-2:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}
{"instance_id": "dbsetup-sqlite-3", "success_command": "sqlite3 /data/test.db \"SELECT COUNT(*) FROM logs;\" | grep -q '[1-9]' && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "Install SQLite. The script in /testbed must be adapted or fixed to successfully create the /data/test.db file and insert a log entry. The test.db file may need to be replaced due to permission or corruption issues.", "description": "A difficult SQLite task that tests real-world OS-level and application integration issues. The agent must handle file permission errors, legacy Python compatibility, and correct a broken initialization script to successfully create a working SQLite database in the target location.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and setup projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nInstall SQLite. The script in /testbed must be adapted or fixed to successfully create the /data/test.db file and insert a log entry. The test.db file may need to be replaced due to permission or corruption issues.\n\nAdditional Instructions:\n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the task was successful.\n\n", "image_tag": "setupbench.eval.x86_64.dbsetup-sqlite-3:msbench-0.0.4", "task_type": "dbsetup", "base_image": "ubuntu:22.04"}