{"language": "python", "repo_url": "https://github.com/openai/whisper", "license_spdx": "MIT", "success_command": "python3 -m whisper --help | grep -qi 'usage:' && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/openai/whisper\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n- \n", "base_commit": "517a43ecd132a2089d85f4ebc044728a71d49f6e", "instance_id": "whisper-517a43e", "image_tag": "setupbench.eval.x86_64.whisper-517a43e:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04"}
{"language": "python", "repo_url": "https://github.com/madmaze/pytesseract", "license_spdx": "Apache-2.0", "success_command": "python3 -c \"import pytesseract; print(pytesseract.get_tesseract_version())\" > /dev/null 2>&1 && echo 'Setup successful' || echo 'Setup failed'", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/madmaze/pytesseract\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n- \n", "base_commit": "df9fce0b5c5ea3cd9182fce8870ab9241d951173", "instance_id": "pytesseract-df9fce0", "image_tag": "setupbench.eval.x86_64.pytesseract-df9fce0:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04"}
{"language": "python", "repo_url": "https://github.com/TA-Lib/ta-lib-python", "license_spdx": "BSD-2-Clause", "success_command": "python3 -c \"import talib; print('Setup successful' if 'SMA' in dir(talib) else 'Setup failed')\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/TA-Lib/ta-lib-python\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n- \n", "base_commit": "0c957ed45e6371925cf0e4f44cc06833306c659c", "instance_id": "ta-lib-python-0c957ed", "image_tag": "setupbench.eval.x86_64.ta-lib-python-0c957ed:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04"}
{"language": "java", "repo_url": "https://github.com/spring-projects/spring-petclinic", "license_spdx": "Apache-2.0", "success_command": "nohup java -jar target/*.jar > application.log 2>&1 & sleep 20 && curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080/ | grep -q \"200\" && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "You must install the curl command.", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/spring-projects/spring-petclinic\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n- You must install the curl command.\n", "base_commit": "2aa53f929d32b0d41e0fe0391b8385eabe9a3432", "instance_id": "spring-petclinic-2aa53f9", "image_tag": "setupbench.eval.x86_64.spring-petclinic-2aa53f9:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04"}
{"language": "java", "repo_url": "https://github.com/apache/cassandra", "license_spdx": "Apache-2.0", "success_command": "bin/cassandra -R && sleep 80 && bin/nodetool status | grep -q 'UN\\s\\+127.0.0.1' && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/apache/cassandra\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n- \n", "base_commit": "73cd2c56ca07fc4bd1c77a7a45e1d6e27941fefa", "instance_id": "cassandra-73cd2c5", "image_tag": "setupbench.eval.x86_64.cassandra-73cd2c5:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04"}
{"language": "rust", "repo_url": "https://github.com/habitat-sh/habitat", "license_spdx": "Apache-2.0", "success_command": "hab --version >/dev/null 2>&1 && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/habitat-sh/habitat\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n- \n", "base_commit": "5826ff8e54da8985c2aa66b894aa962c4cd5d09b", "instance_id": "habitat-5826ff8", "image_tag": "setupbench.eval.x86_64.habitat-5826ff8:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04"}
{"language": "rust", "repo_url": "https://github.com/servo/servo", "license_spdx": "MPL-2.0", "success_command": "./mach test-unit --test lib && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/servo/servo\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n- \n", "base_commit": "e199a67dac1aa3c74fb86f103c13ae78ce523f20", "instance_id": "servo-e199a67", "image_tag": "setupbench.eval.x86_64.servo-e199a67:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04"}
{"language": "c++", "repo_url": "https://github.com/monero-project/monero", "license_spdx": "BSD-3-Clause AND MIT", "success_command": "monerod --version | grep -q 'Monero ' && echo \"Setup successful\" || echo \"Setup failed\"", "notes": "After setup, you must start the monero daemon in detached mode and add it to the path", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/monero-project/monero\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n- After setup, you must start the monero daemon in detached mode and add it to the path\n", "base_commit": "84685492e63867b72fc6412093273ecd625190d1", "instance_id": "monero-8468549", "image_tag": "setupbench.eval.x86_64.monero-8468549:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04"}
{"language": "go", "repo_url": "https://github.com/prometheus/prometheus", "license_spdx": "Apache-2.0", "success_command": "curl -s http://localhost:9090/metrics | grep -q 'prometheus_build_info' && echo 'Setup successful' || echo 'Setup failed'", "notes": "After setup, you must start Prometheus server using the sample config file ./documentation/examples/prometheus.yml", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/prometheus/prometheus\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n- After setup, you must start Prometheus server using the sample config file ./documentation/examples/prometheus.yml\n", "base_commit": "bd5b2ea95ce14fba11db871b4068313408465207", "instance_id": "prometheus-bd5b2ea", "image_tag": "setupbench.eval.x86_64.prometheus-bd5b2ea:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04"}
{"language": "go", "repo_url": "https://github.com/caddyserver/caddy", "license_spdx": "Apache-2.0", "success_command": "caddy list-modules | grep -q 'http' && echo 'Setup successful' || echo 'Setup failed'", "notes": "After setup, you must add the caddy executable to the path", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/caddyserver/caddy\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n- After setup, you must add the caddy executable to the path\n", "base_commit": "782a3c7ac60c82311fe9fb8889dd843dfe26c0bc", "instance_id": "caddy-782a3c7", "image_tag": "setupbench.eval.x86_64.caddy-782a3c7:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04"}
{"language": "python", "repo_url": "https://github.com/aarora4/whisper", "license_spdx": "MIT", "success_command": "python3 -m whisper --help | grep -qi 'usage:' && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/aarora4/whisper\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n- \n", "base_commit": "24bed798a8d7162ac08cc806176cecc46b3cb05a", "instance_id": "whisper-brokendeps-517a43e", "image_tag": "setupbench.eval.x86_64.whisper-brokendeps-517a43e:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04"}
{"language": "typescript", "repo_url": "https://github.com/microsoft/TypeScript-Vue-Starter", "license_spdx": "MIT", "success_command": "yarn test && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/microsoft/TypeScript-Vue-Starter\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "microsoft-typescript-vue-starter-c451742", "image_tag": "setupbench.eval.x86_64.microsoft-typescript-vue-starter-c451742:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 0}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 2}, "build_commands": ["yarn install"], "base_commit": "c4517422dac9a539f899d11709ca9f560e51937b"}
{"language": "typescript", "repo_url": "https://github.com/microsoft/azure-pipelines-tasks", "license_spdx": "MIT", "success_command": "npm run test && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/microsoft/azure-pipelines-tasks\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "microsoft-azure-pipelines-tasks-bfcd4b2", "image_tag": "setupbench.eval.x86_64.microsoft-azure-pipelines-tasks-bfcd4b2:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 3}, "build_commands": ["npm install", "npm run build"], "base_commit": "bfcd4b28ce59422c454a601b798e6c30c1ddb9e0"}
{"language": "javascript", "repo_url": "https://github.com/graphql/dataloader", "license_spdx": "MIT", "success_command": "yarn test && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/graphql/dataloader\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "graphql-dataloader-003c045", "image_tag": "setupbench.eval.x86_64.graphql-dataloader-003c045:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 0}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 3}, "build_commands": ["yarn install", "yarn build"], "base_commit": "003c0457e1543764682fa0af47da08b22c46e533"}
{"language": "javascript", "repo_url": "https://github.com/hybridgroup/cylon", "license_spdx": "Apache-2.0", "success_command": "make test && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/hybridgroup/cylon\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "hybridgroup-cylon-0ba0301", "image_tag": "setupbench.eval.x86_64.hybridgroup-cylon-0ba0301:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 2}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 3}, "build_commands": ["npm install"], "base_commit": "0ba0301318fefd337900a121dffef500ca453a09"}
{"language": "typescript", "repo_url": "https://github.com/transitive-bullshit/chatgpt-api", "license_spdx": "MIT", "success_command": "pnpm run test && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/transitive-bullshit/chatgpt-api\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "transitive-bull-chatgpt-api-811ae8f", "image_tag": "setupbench.eval.x86_64.transitive-bull-chatgpt-api-811ae8f:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 2, "read_file": 5}, "build_commands": ["pnpm install", "pnpm run build"], "base_commit": "811ae8f464f395e3b551a7785e3d07f411353d68"}
{"language": "javascript", "repo_url": "https://github.com/hackmdio/codimd", "license_spdx": "AGPL-3.0", "success_command": "node app.js && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/hackmdio/codimd\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "hackmdio-codimd-f00df50", "image_tag": "setupbench.eval.x86_64.hackmdio-codimd-f00df50:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 2, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 2, "read_file": 5}, "build_commands": ["./bin/setup", "npm run build"], "base_commit": "f00df5058dd8ff70e057b8f4500714f7f773990a"}
{"language": "typescript", "repo_url": "https://github.com/actions/cache", "license_spdx": "MIT", "success_command": "npm run test && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/actions/cache\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "actions-cache-81382a7", "image_tag": "setupbench.eval.x86_64.actions-cache-81382a7:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 3}, "build_commands": ["npm install", "npm run build"], "base_commit": "81382a721fc89d96eca335d0c3ba33144b2baa9d"}
{"language": "typescript", "repo_url": "https://github.com/openai/openai-node", "license_spdx": "Apache-2.0", "success_command": "timeout 300s ./scripts/test && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/openai/openai-node\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "openai-openai-node-8958d97", "image_tag": "setupbench.eval.x86_64.openai-openai-node-8958d97:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 3}, "build_commands": ["yarn", "yarn build"], "base_commit": "8958d9711b66e0cbacf816b7b4538217016beb0b"}
{"language": "python", "repo_url": "https://github.com/laramies/theHarvester", "license_spdx": "GPL-2.0-only", "success_command": "pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/laramies/theHarvester\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "laramies-theharvester-e25c269", "image_tag": "setupbench.eval.x86_64.laramies-theharvester-e25c269:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 2, "read_file": 3}, "build_commands": ["pip install .[dev]"], "base_commit": "e25c26931255b1f655194895305697ed842ef2e5"}
{"language": "python", "repo_url": "https://github.com/networkx/networkx", "license_spdx": "BSD-3-Clause", "success_command": "pytest --pyargs networkx && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/networkx/networkx\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "networkx-networkx-c107d25", "image_tag": "setupbench.eval.x86_64.networkx-networkx-c107d25:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 2, "read_file": 6}, "build_commands": ["pip install -r requirements/default.txt -r requirements/test.txt -r requirements/developer.txt", "pip install -e .", "pip install pre-commit", "pre-commit install"], "base_commit": "c107d25c853fbfe082c12d9e8c77afe4f34e91da"}
{"language": "python", "repo_url": "https://github.com/pypa/pipenv", "license_spdx": "MIT", "success_command": "pipenv && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/pypa/pipenv\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "pypa-pipenv-b895476", "image_tag": "setupbench.eval.x86_64.pypa-pipenv-b895476:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 2}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 5}, "build_commands": ["make submodules", "make install", "make test-install", "pipenv install pre-commit", "pipenv run pre-commit install"], "base_commit": "b895476bc4003bc1f544ca56a4e0708a99f5b0c7"}
{"language": "python", "repo_url": "https://github.com/wagtail/wagtail", "license_spdx": "BSD-3-Clause", "success_command": "wagtail start mysite && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/wagtail/wagtail\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "wagtail-wagtail-28fcd01", "image_tag": "setupbench.eval.x86_64.wagtail-wagtail-28fcd01:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 6}, "build_commands": ["pip install -e .[testing,docs]", "npm ci", "npm run build", "pip install pre-commit", "pre-commit install"], "base_commit": "28fcd01a31374e15d4e40e6f42f4f81445b85f77"}
{"language": "python", "repo_url": "https://github.com/celery/celery", "license_spdx": "BSD-3-Clause", "success_command": "celery && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/celery/celery\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "celery-celery-03e3359", "image_tag": "setupbench.eval.x86_64.celery-celery-03e3359:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 4, "read_file": 6}, "build_commands": ["pip install -e .", "pip install -r requirements/test.txt", "pip install -r requirements/docs.txt", "pip install -r requirements/pkgutils.txt", "pip install pre-commit", "pre-commit install"], "base_commit": "03e3359320c9f72507a32a51ab61605db503da98"}
{"language": "python", "repo_url": "https://github.com/fsspec/filesystem_spec", "license_spdx": "BSD-3-Clause", "success_command": "pytest -v && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/fsspec/filesystem_spec\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "fsspec-filesystem_spec-3ff5fca", "image_tag": "setupbench.eval.x86_64.fsspec-filesystem_spec-3ff5fca:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 4}, "build_commands": ["pip install -e \".[dev,doc,test]\""], "base_commit": "3ff5fcaff6a4845cdd1985594120105fb35ceb51"}
{"language": "python", "repo_url": "https://github.com/nedbat/coveragepy", "license_spdx": "Apache-2.0", "success_command": "tox -e py310 && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/nedbat/coveragepy\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "nedbat-coveragepy-9d0eb02", "image_tag": "setupbench.eval.x86_64.nedbat-coveragepy-9d0eb02:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 2, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 2, "read_file": 7}, "build_commands": ["pip install -r requirements/dev.pip"], "base_commit": "9d0eb0237359978b3a650f9da444e7f3ae7233e2"}
{"language": "python", "repo_url": "https://github.com/public-apis/public-apis", "license_spdx": "MIT", "success_command": "cd scripts && python3 -m unittest discover tests/ --verbose && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/public-apis/public-apis\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "public-apis-public-apis-b354ba6", "image_tag": "setupbench.eval.x86_64.public-apis-public-apis-b354ba6:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 3, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 4, "read_file": 5}, "build_commands": ["python -m pip install -r ./scripts/requirements.txt", "python -m pip install pytest"], "base_commit": "b354ba6f4fc596b72db80c5a4051be4d837f6cf6"}
{"language": "python", "repo_url": "https://github.com/python-hyper/rfc3986", "license_spdx": "Apache-2.0", "success_command": "python3 -m pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/python-hyper/rfc3986\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "python-hyper-rfc3986-75e77ba", "image_tag": "setupbench.eval.x86_64.python-hyper-rfc3986-75e77ba:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 3, "read_file": 7}, "build_commands": ["pip install -e .[idna2008]", "pip install -r dev-requirements.txt"], "base_commit": "75e77baed146976442bb11d4adda0eb322c6a6b5"}
{"language": "python", "repo_url": "https://github.com/benjaminp/six", "license_spdx": "MIT", "success_command": "python3 -m pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/benjaminp/six\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "benjaminp-six-c1b416f", "image_tag": "setupbench.eval.x86_64.benjaminp-six-c1b416f:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 3, "read_file": 5}, "build_commands": ["python -m pip install pytest", "python -m pip install ."], "base_commit": "c1b416f24de52ebd8eaed3e379ab85ec9c3e935b"}
{"language": "python", "repo_url": "https://github.com/yaml/pyyaml", "license_spdx": "MIT", "success_command": "python3 -m pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/yaml/pyyaml\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "yaml-pyyaml-a2d19c0", "image_tag": "setupbench.eval.x86_64.yaml-pyyaml-a2d19c0:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 3, "read_file": 6}, "build_commands": ["python -m pip install .", "python -m pip install pytest"], "base_commit": "a2d19c0234866dc9d4d55abf3009699c258bb72f"}
{"language": "python", "repo_url": "https://github.com/pypa/packaging", "license_spdx": "BSD-2-Clause OR Apache-2.0", "success_command": "python3 -m pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/pypa/packaging\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "pypa-packaging-4493dfc", "image_tag": "setupbench.eval.x86_64.pypa-packaging-4493dfc:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 3, "read_file": 4}, "human_actions_upper_bound": {"check_dir": 5, "read_file": 8}, "build_commands": ["python -m pip install -r tasks/requirements.txt", "python -m pip install -r tests/requirements.txt", "python -m pip install ."], "base_commit": "4493dfcd95a893f676a7aa4bd17c547bea676371"}
{"language": "python", "repo_url": "https://github.com/Ousret/charset_normalizer", "license_spdx": "MIT", "success_command": "python3 -m pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/Ousret/charset_normalizer\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "ousret-charset_normalizer-816c998", "image_tag": "setupbench.eval.x86_64.ousret-charset_normalizer-816c998:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 3, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 4, "read_file": 7}, "build_commands": ["python -m pip install -r dev-requirements.txt", "python -m pip install -e ."], "base_commit": "816c998ef70ddb645cc2e3205f632708e365374d"}
{"language": "python", "repo_url": "https://github.com/pallets/click", "license_spdx": "BSD-3-Clause", "success_command": "python3 -m pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/pallets/click\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "pallets-click-14f735c", "image_tag": "setupbench.eval.x86_64.pallets-click-14f735c:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 2, "read_file": 6}, "build_commands": ["python -m pip install -r requirements/dev.txt", "python -m pip install -e ."], "base_commit": "14f735cf59618941cf2930e633eb77651b1dc7cb"}
{"language": "python", "repo_url": "https://github.com/marshmallow-code/marshmallow", "license_spdx": "MIT", "success_command": "python3 -m pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/marshmallow-code/marshmallow\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "marshmallow-code-marshmallow-659fed5", "image_tag": "setupbench.eval.x86_64.marshmallow-code-marshmallow-659fed5:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 4, "read_file": 6}, "build_commands": ["python -m pip install -e '.[dev]'"], "base_commit": "659fed5c2b5b51199716b7341ee406df01831049"}
{"language": "python", "repo_url": "https://github.com/dstl/Stone-Soup", "license_spdx": "MIT", "success_command": "python3 -m pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/dstl/Stone-Soup\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "dstl-stone-soup-4b6bd37", "image_tag": "setupbench.eval.x86_64.dstl-stone-soup-4b6bd37:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 4, "read_file": 4}, "build_commands": ["python -m pip install -e '.[dev]'"], "base_commit": "4b6bd37813d4c96e3efa63847ab3f1ea7153a508"}
{"language": "python", "repo_url": "https://github.com/psf/black", "license_spdx": "MIT", "success_command": "python3 -m pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/psf/black\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "psf-black-c204232", "image_tag": "setupbench.eval.x86_64.psf-black-c204232:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 3, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 5, "read_file": 8}, "build_commands": ["python -m pip install -e '.[d]'", "python -m pip install -r test_requirements.txt"], "base_commit": "c20423249e9d8dfb8581eebbfc67a13984ee45e9"}
{"language": "python", "repo_url": "https://github.com/testing-cabal/testtools", "license_spdx": "MIT", "success_command": "make check && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/testing-cabal/testtools\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "testing-cabal-testtools-ef5c465", "image_tag": "setupbench.eval.x86_64.testing-cabal-testtools-ef5c465:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 3, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 4, "read_file": 7}, "build_commands": ["pip install -e '.[dev,test,twisted]'"], "base_commit": "ef5c465bbf95f1915f06ec5a4080809932566757"}
{"language": "python", "repo_url": "https://github.com/ionelmc/python-tblib", "license_spdx": "BSD-2-Clause", "success_command": "python3 -m pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/ionelmc/python-tblib\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "ionelmc-python-tblib-9f6f864", "image_tag": "setupbench.eval.x86_64.ionelmc-python-tblib-9f6f864:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 3, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 4, "read_file": 7}, "build_commands": ["python -m pip install -e .", "python -m pip install pytest"], "base_commit": "9f6f864f7de6ce6640bab6d962f00b956da75361"}
{"language": "python", "repo_url": "https://github.com/bolsote/isoduration", "license_spdx": "ISC", "success_command": "python3 -m pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/bolsote/isoduration\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "bolsote-isoduration-ae0bd61", "image_tag": "setupbench.eval.x86_64.bolsote-isoduration-ae0bd61:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 1}, "build_commands": ["pip install -e .", "pip install -r requirements/dev.txt"], "base_commit": "ae0bd61507aa04e032402566a2c7c01a0402929c"}
{"language": "python", "repo_url": "https://github.com/openstack/stevedore", "license_spdx": "Apache-2.0", "success_command": "tox -e py310 && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/openstack/stevedore\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "openstack-stevedore-51134a4", "image_tag": "setupbench.eval.x86_64.openstack-stevedore-51134a4:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 7}, "build_commands": ["python -m pip install tox"], "base_commit": "51134a4dc04872df9f736e5ae52d4b665c40e364"}
{"language": "python", "repo_url": "https://github.com/nvbn/thefuck", "license_spdx": "MIT", "success_command": "fuck && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/nvbn/thefuck\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "nvbn-tf-c7e7e1d", "image_tag": "setupbench.eval.x86_64.nvbn-tf-c7e7e1d:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 5, "read_file": 6}, "build_commands": ["python -m pip install -r requirements.txt", "python -m pip install -e ."], "base_commit": "c7e7e1d884d3bb241ea6448f72a989434c2a35ec"}
{"language": "python", "repo_url": "https://github.com/falconry/falcon", "license_spdx": "Apache-2.0", "success_command": "falcon-bench && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/falconry/falcon\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "falconry-falcon-cae50da", "image_tag": "setupbench.eval.x86_64.falconry-falcon-cae50da:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 2}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 5}, "build_commands": ["pip install -e \".[test]\"", "pip install -r requirements/bench", "pip install -r requirements/docs", "pip install -r requirements/tests"], "base_commit": "cae50da40454a361fec84e58d4b44bedc5b6c0cd"}
{"language": "python", "repo_url": "https://github.com/mampfes/hacs_waste_collection_schedule", "license_spdx": "MIT", "success_command": "python3 -m pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/mampfes/hacs_waste_collection_schedule\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "mampfes-hacs_waste_collection_schedule-dbab343", "image_tag": "setupbench.eval.x86_64.mampfes-hacs_waste_collection_schedule-dbab343:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 3, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 6, "read_file": 6}, "build_commands": ["python -m pip install -r requirements.txt", "python -m pip install flake8 pytest"], "base_commit": "dbab343cd536847596ba2f95b7720f4a0eceef49"}
{"language": "python", "repo_url": "https://github.com/pallets/flask", "license_spdx": "BSD-3-Clause", "success_command": "pytest && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/pallets/flask\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "pallets-flask-2fec0b2", "image_tag": "setupbench.eval.x86_64.pallets-flask-2fec0b2:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 3, "read_file": 4}, "build_commands": ["python -m pip install -r requirements/dev.txt", "python -m pip install -e .[async,dotenv]", "pre-commit install --install-hooks"], "base_commit": "2fec0b206c6e83ea813ab26597e15c96fab08be7"}
{"language": "python", "repo_url": "https://github.com/qubvel/segmentation_models.pytorch", "license_spdx": "MIT", "success_command": "make table && echo \"Setup successful\" || echo \"Setup failed\"", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/qubvel/segmentation_models.pytorch\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "instance_id": "qubvel-segmentation_models-pytorch-ccccadd", "image_tag": "setupbench.eval.x86_64.qubvel-segmentation_models-pytorch-ccccadd:msbench-0.0.4", "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 2}, "build_commands": ["make install_dev"], "base_commit": "ccccaddfc28bc9d9e7c774cca71d5567a7c8f8d7"}
{"language": "javascript", "repo_url": "https://github.com/beautify-web/js-beautify", "license_spdx": "MIT", "commit_hash": "6de926850b7c3765c23830abe5ea8803908ca177", "build_commands": ["make"], "success_command": "verify_web() { make serve & pid=$!; sleep 90; code=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3000); [ $code -eq 200 ] && echo \"Setup successful\" || echo \"Setup failed\"; pgid=$(ps -o pgid= $pid | tr -d ' '); kill -TERM -$pgid 2>/dev/null; }; verify_web || echo \"Setup failed\"", "instance_id": "beautify-web-js-beautify-6de9268", "image_tag": "setupbench.eval.x86_64.beautify-web-js-beautify-6de9268:msbench-0.0.4", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/beautify-web/js-beautify\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "start_new_session": true, "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 3, "read_file": 3}, "base_commit": "6de926850b7c3765c23830abe5ea8803908ca177"}
{"language": "javascript", "repo_url": "https://github.com/lhartikk/naivechain", "license_spdx": "Apache-2.0", "commit_hash": "dfd2481e7158f72e54fba4ce0bd2f48d0a44945e", "build_commands": ["npm install"], "success_command": "verify_multi_worker() { HTTP_PORT=3001 P2P_PORT=6001 npm start & pid1=$!; sleep 45; HTTP_PORT=3002 P2P_PORT=6002 PEERS=ws://localhost:6001 npm start & pid2=$!; sleep 45; code=$(curl -s -H \"Content-type:application/json\" --data '{\"data\" : \"Some data to the first block\"}' -o /dev/null -w \"%{http_code}\" http://localhost:3001/mineBlock); [ $code -eq 200 ] && echo \"Setup successful\" || echo \"Setup failed\"; pgid1=$(ps -o pgid= $pid1 | tr -d ' '); pgid2=$(ps -o pgid= $pid2 | tr -d ' '); kill -TERM -$pgid1 2>/dev/null; kill -TERM -$pgid2 2>/dev/null; }; verify_multi_worker || echo \"Setup failed\"", "instance_id": "lhartikk-naivechain-dfd2481", "image_tag": "setupbench.eval.x86_64.lhartikk-naivechain-dfd2481:msbench-0.0.4", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/lhartikk/naivechain\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "start_new_session": true, "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 1, "read_file": 3}, "base_commit": "dfd2481e7158f72e54fba4ce0bd2f48d0a44945e"}
{"language": "javascript", "repo_url": "https://github.com/hoodiehq/hoodie", "license_spdx": "Apache-2.0", "commit_hash": "bd1354f10b2bcad154f24c3b35865ce3e05bd83a", "build_commands": ["npm install"], "success_command": "verify_web() { npm run start & pid=$!; sleep 90; code=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080); [ $code -eq 200 ] && echo \"Setup successful\" || echo \"Setup failed\"; pgid=$(ps -o pgid= $pid | tr -d ' '); kill -TERM -$pgid 2>/dev/null; }; verify_web || echo \"Setup failed\"", "instance_id": "hoodiehq-hoodie-bd1354f", "image_tag": "setupbench.eval.x86_64.hoodiehq-hoodie-bd1354f:msbench-0.0.4", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/hoodiehq/hoodie\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "start_new_session": true, "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 3, "read_file": 4}, "base_commit": "bd1354f10b2bcad154f24c3b35865ce3e05bd83a"}
{"language": "typescript", "repo_url": "https://github.com/DanWahlin/Angular-JumpStart", "license_spdx": "MIT", "commit_hash": "12fa4e4cc118990a0a045a8a2130c23e2350977c", "build_commands": ["npm install", "npx ng build angular-jumpstart", "npm install cypress --save-dev"], "success_command": "verify_web() { npm start & pid=$!; sleep 90; code=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080); [ $code -eq 200 ] && echo \"Setup successful\" || echo \"Setup failed\"; pgid=$(ps -o pgid= $pid | tr -d ' '); kill -TERM -$pgid 2>/dev/null; }; verify_web || echo \"Setup failed\"", "instance_id": "danwahlin-angular-jumpstart-12fa4e4", "image_tag": "setupbench.eval.x86_64.danwahlin-angular-jumpstart-12fa4e4:msbench-0.0.4", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/DanWahlin/Angular-JumpStart\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "start_new_session": true, "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 4, "read_file": 4}, "base_commit": "12fa4e4cc118990a0a045a8a2130c23e2350977c"}
{"language": "javascript", "repo_url": "https://github.com/dishait/tov-template", "license_spdx": "MIT", "commit_hash": "39c0898b29f4bf51da8321f765fabd197bd2d592", "build_commands": ["pnpm install", "pnpm prepare"], "success_command": "verify_web() { pnpm dev & pid=$!; sleep 90; code=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:5173); [ $code -eq 200 ] && echo \"Setup successful\" || echo \"Setup failed\"; pgid=$(ps -o pgid= $pid | tr -d ' '); kill -TERM -$pgid 2>/dev/null; }; verify_web || echo \"Setup failed\"", "instance_id": "dishait-tov-template-39c0898", "image_tag": "setupbench.eval.x86_64.dishait-tov-template-39c0898:msbench-0.0.4", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/dishait/tov-template\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "start_new_session": true, "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 3, "read_file": 4}, "base_commit": "39c0898b29f4bf51da8321f765fabd197bd2d592"}
{"language": "typescript", "repo_url": "https://github.com/johnpapa/vscode-angular-snippets", "license_spdx": "MIT", "commit_hash": "1551fe19c3d8a915b5978c0f143279021fa66e84", "build_commands": ["npm install"], "success_command": "verify_web() { npm run open-in-browser & pid=$!; sleep 90; code=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3000); [ $code -eq 200 ] && echo \"Setup successful\" || echo \"Setup failed\"; pgid=$(ps -o pgid= $pid | tr -d ' '); kill -TERM -$pgid 2>/dev/null; }; verify_web || echo \"Setup failed\"", "instance_id": "johnpapa-vscode-angular-snippets-1551fe1", "image_tag": "setupbench.eval.x86_64.johnpapa-vscode-angular-snippets-1551fe1:msbench-0.0.4", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/johnpapa/vscode-angular-snippets\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "start_new_session": true, "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 2, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 2, "read_file": 4}, "base_commit": "1551fe19c3d8a915b5978c0f143279021fa66e84"}
{"language": "typescript", "repo_url": "https://github.com/melt-ui/melt-ui", "license_spdx": "MIT", "commit_hash": "c566aae9e468945c614b3dea96e3a346c1bd6e33", "build_commands": ["pnpm install", "pnpm build"], "success_command": "verify_web() { pnpm run dev & pid=$!; sleep 90; code=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:5173); [ $code -eq 200 ] && echo \"Setup successful\" || echo \"Setup failed\"; pgid=$(ps -o pgid= $pid | tr -d ' '); kill -TERM -$pgid 2>/dev/null; }; verify_web || echo \"Setup failed\"", "instance_id": "melt-ui-melt-ui-c566aae", "image_tag": "setupbench.eval.x86_64.melt-ui-melt-ui-c566aae:msbench-0.0.4", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/melt-ui/melt-ui\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "start_new_session": true, "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 2}, "human_actions_upper_bound": {"check_dir": 4, "read_file": 8}, "base_commit": "c566aae9e468945c614b3dea96e3a346c1bd6e33"}
{"language": "python", "repo_url": "https://github.com/microsoft/vscode-remote-try-python", "license_spdx": "MIT", "commit_hash": "e351212b72f76fb557c6f31956eb44756300b8b4", "build_commands": ["pip install -r requirements.txt"], "success_command": "verify_web() { python3 -m flask run --no-debugger --no-reload & pid=$!; sleep 90; code=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:5000); [ $code -eq 200 ] && echo \"Setup successful\" || echo \"Setup failed\"; pgid=$(ps -o pgid= $pid | tr -d ' '); kill -TERM -$pgid 2>/dev/null; }; verify_web || echo \"Setup failed\"", "instance_id": "microsoft-vscode-remote-try-python-e351212", "image_tag": "setupbench.eval.x86_64.microsoft-vscode-remote-try-python-e351212:msbench-0.0.4", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/microsoft/vscode-remote-try-python\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "start_new_session": true, "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 2, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 3, "read_file": 2}, "base_commit": "e351212b72f76fb557c6f31956eb44756300b8b4"}
{"language": "python", "repo_url": "https://github.com/reflex-dev/reflex", "license_spdx": "Apache-2.0", "commit_hash": "8657976a6e4b6b6aef305ee7f6154907bac86870", "build_commands": ["apt-get install unzip", "poetry install"], "success_command": "verify_init_and_run() { (mkdir examples; cd examples; poetry run reflex init --template blank; poetry run reflex run;) & pid=$!; sleep 90; code=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:3000); [ $code -eq 200 ] && echo \"Setup successful\" || echo \"Setup failed\"; pgid=$(ps -o pgid= $pid | tr -d ' '); kill -TERM -$pgid 2>/dev/null; }; verify_init_and_run || echo \"Setup failed\"", "instance_id": "reflex-dev-reflex-8657976", "image_tag": "setupbench.eval.x86_64.reflex-dev-reflex-8657976:msbench-0.0.4", "problem_statement": "You are in a benchmark that evaluates your ability to interpret documentation, install dependencies, configure, and build real-world open-source projects in a completely minimal environment.\n\nEnvironment Details\nYou are operating inside a fresh Ubuntu 22.04 environment with no tools or packages preinstalled \u2014 not even python3 or build-essential.\n\nKey constraints:\n\nYou must install all required dependencies globally using apt or other system-level installers.\nDo not create or use virtual environments (e.g., no venv, conda, or containerization).\nYour setup should be non-interactive and able to run in a headless CI environment.\nAssume you are starting from scratch \u2014 no assumptions about preinstalled tools.\nYou have root privileges in the environment, so there is no need to use sudo.\n\nTask:\nYou must fully set up a GitHub repository. This may include installing dependencies, compiling and building the project, starting a server, etc. depending on the repository. Utilize the README and other documentation present in the repo the guide and inform your setup process.\n\nRepository URL:\nhttps://github.com/reflex-dev/reflex\n\n\nAdditional Instructions:\n- The repository has been cloned into the /testbed directory so that the root of the GitHub repository maps directly to /testbed. \n- At the end of the setup, you will be evaluated by running a single-line success command to confirm the build was successful.\n", "start_new_session": true, "task_type": "reposetup", "base_image": "ubuntu:22.04", "human_actions_lower_bound": {"check_dir": 1, "read_file": 1}, "human_actions_upper_bound": {"check_dir": 4, "read_file": 4}, "base_commit": "8657976a6e4b6b6aef305ee7f6154907bac86870"}
